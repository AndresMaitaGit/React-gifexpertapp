{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAuCeA,EApCK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEJC,mBAAS,IAFL,mBAEjCC,EAFiC,KAErBC,EAFqB,KAoBxC,OAEK,0BAAMC,SAdU,SAAEC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,YCNlBG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEjC,OACI,yBAAKC,UAAU,4CACX,yBAAKC,IAAMF,EAAMG,IAAOJ,IACxB,+BAAMA,EAAN,O,uBCLCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,0FAE6EO,UAAUF,GAFvF,sBAGAG,MAAOR,GAHP,cAGbS,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAACc,EAAIE,cAAL,aAAC,EAAYC,iBAAiBjB,QAVtB,kBAcZY,GAdY,4CAAH,sDCEPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECAZ,SAAEA,GAAe,IAAD,EAEfpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAuBzC,OAfAC,qBAAW,WAEPlB,EAASC,GACJkB,MAAO,SAAAC,GAEAH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAK1B,CAAEd,IAGEe,EDrB0BK,CAAepB,GAAnCW,EAFwB,EAE7BL,KAAaQ,EAFgB,EAEhBA,QAGrB,OACI,oCACA,wBAAIlB,UAAU,wCAA0CI,GAEvDc,GAAW,uBAAGlB,UAAW,qCAAd,WAEZ,yBAAKA,UAAU,aAEXe,EAAOH,KAAK,SAACC,GAAD,OACZ,kBAAC,EAAD,eACAY,IAAKZ,EAAIC,IACLD,UEgBDa,EAhCM,WAAM,MAGa1C,mBAAS,CAAC,cAHvB,mBAGhB2C,EAHgB,KAGJ5C,EAHI,KAevB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAGI4C,EAAWf,KAAK,SAAAR,GACZ,OAAO,kBAAC,EAAD,CACHqB,IAAQrB,EACRA,SAAaA,S,MCtBrCwB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.a4b4b120.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories } ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n//la condicion es para que  tenga mas de 2 caracteres como  minimo para poder agregar\r\n        if (inputValue.trim().length > 2 ){\r\n\r\n            setCategories(cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n\r\n         <form onSubmit= { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value= {inputValue}\r\n                onChange={handleInputChange }\r\n            />\r\n         </form>\r\n\r\n    )  \r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n  \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInUp\">\r\n            <img src={ url } alt= { title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=Jn2N8QJAwLxoPUK7ZYHVSzoUOkMHABbD&q=${ encodeURI(category) }&limit=12`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(  category );\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\" animate__animated animate__fadeInUp\" >{ category }</h3>\r\n\r\n        {loading && <p className= \" animate__animated animate__flash\">Loading</p>}\r\n\r\n        <div className=\"card-grid\">\r\n        {\r\n            images.map( (img) => (\r\n            <GifGridItem \r\n            key={img.id}\r\n            {...img}\r\n            />\r\n            ))\r\n        }\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\n \r\n export const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    \r\n    useEffect( () =>{\r\n        \r\n        getGifs( category )\r\n            .then ( imgs => {\r\n\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                    })\r\n\r\n\r\n    }, [ category ])\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n }\r\n ","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n        // una forma\r\n        // setCategories( ['Pokemon', ...Categories] );\r\n        \r\n        //si se quiere que salga al final se coloca de forma invertida como\r\n        // setCategories( [...Categories, 'Pokemon'] );\r\n\r\n        //otra forma y la recomendada seria.\r\n        // setCategories(cats => [...cats, 'Pokemon' ]);\r\n        \r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr />\r\n\r\n            {\r\n                categories.map( category => {  // no hay que cometer el error de colocar como key el indice \" i \".\r\n                    return <GifGrid \r\n                        key = { category }\r\n                        category = { category } /> \r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GitExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}